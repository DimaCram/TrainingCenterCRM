// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingCenterCRM.DAL.EF.Context;

namespace TrainingCenterCRM.DAL.EF.Migrations
{
    [DbContext(typeof(TrainingCenterContext))]
    [Migration("20211013173817_AddPriceForCourse")]
    partial class AddPriceForCourse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "021cb353-a049-404c-b2f6-b067a48a3b9a",
                            ConcurrencyStamp = "cf900ee9-2ac7-4e11-a2f8-697478924702",
                            Name = "user",
                            NormalizedName = "user"
                        },
                        new
                        {
                            Id = "800ac90f-e24c-485a-8be4-5869972e12a7",
                            ConcurrencyStamp = "f3e8e5f2-d74a-4e58-9f73-804b0aad1303",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "dc580e4d-92ba-47a9-bb31-62b0afb85445",
                            ConcurrencyStamp = "d3983f65-8f24-4939-a7ea-5da8a8ce9d75",
                            Name = "teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = "9d5aeb79-50ca-48db-91dc-3a72f06c978f",
                            ConcurrencyStamp = "09237eb1-7e02-4de6-9ece-a233651e654a",
                            Name = "manager",
                            NormalizedName = "manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8cccb2bc-95ed-4b5c-b72a-a2ee25bb6f94",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "8594cfc3-4252-4502-80e9-5c9dc3341595",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "da19a821-caca-4aa8-b544-45dc830b99d1",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "4188500e-87e7-4375-937c-2a1670a84418",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "6eca67d1-8174-46d9-9916-ed620e57e00d",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "c05565d8-eaa8-4411-9b72-4ad0decdd06d",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "6743e8d1-bb94-48ca-83ce-cd14ba74d17b",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "79301f3b-d0ed-4331-9af8-7c751bce2f9b",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "13309c41-4a79-402e-a5e4-63645c9ce8dd",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "9eb23459-2eaa-40a0-ad80-2f3288665d19",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        },
                        new
                        {
                            UserId = "9888c09b-2509-4cda-a82e-3dbea07d94eb",
                            RoleId = "9d5aeb79-50ca-48db-91dc-3a72f06c978f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic course",
                            Price = 499.0,
                            Title = "C# Programming",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Professional course",
                            Price = 755.0,
                            Title = "Industrial programming with ASP.NET",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Professional course",
                            Price = 699.0,
                            Title = "Development of mobile games on the Unity engine",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Basic course",
                            Price = 499.0,
                            Title = "Java programming",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Professional course",
                            Price = 710.0,
                            Title = "Development of mobile applications for Android",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Professional course",
                            Price = 755.0,
                            Title = "Java Web Development",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Basic course",
                            Price = 610.0,
                            Title = "HTML, CSS and JavaScript",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "Professional course",
                            Price = 729.0,
                            Title = "JavaScript Web Application Development",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 9,
                            Description = "Professional course",
                            Price = 699.0,
                            Title = "React and Angular for web development",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Basic course",
                            Price = 599.0,
                            Title = "C and C++ Programming",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 11,
                            Description = "Professional course",
                            Price = 719.0,
                            Title = "Professional game development in C++",
                            TopicId = 4
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.FileToMaterialAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TeacherId");

                    b.ToTable("FileToMaterialAssignments");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dima",
                            Surname = "Kramkov",
                            UserId = "9888c09b-2509-4cda-a82e-3dbea07d94eb"
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            Name = "Darya",
                            Surname = "Fedorova"
                        },
                        new
                        {
                            Id = 2,
                            Age = 22,
                            Name = "Andrey",
                            Surname = "Popov"
                        },
                        new
                        {
                            Id = 3,
                            Age = 24,
                            Name = "Dima",
                            Surname = "Karasev"
                        },
                        new
                        {
                            Id = 4,
                            Age = 28,
                            Name = "Denis",
                            Surname = "Polonikov"
                        },
                        new
                        {
                            Id = 5,
                            Age = 20,
                            Name = "Anna",
                            Surname = "Bykova"
                        },
                        new
                        {
                            Id = 6,
                            Age = 28,
                            Name = "Vladimir",
                            Surname = "Chernyaev"
                        },
                        new
                        {
                            Id = 7,
                            Age = 30,
                            Name = "Ivan",
                            Surname = "Kochergin"
                        },
                        new
                        {
                            Id = 8,
                            Age = 19,
                            Name = "Eva",
                            Surname = "Demina"
                        },
                        new
                        {
                            Id = 9,
                            Age = 19,
                            Name = "Alexey",
                            Surname = "Bazhenov"
                        },
                        new
                        {
                            Id = 10,
                            Age = 21,
                            Name = "Bogdan",
                            Surname = "Kuznetsov"
                        },
                        new
                        {
                            Id = 11,
                            Age = 26,
                            Name = "Nikolay",
                            Surname = "Savin"
                        },
                        new
                        {
                            Id = 12,
                            Age = 23,
                            Name = "Elizaveta",
                            Surname = "Petrova"
                        },
                        new
                        {
                            Id = 13,
                            Age = 22,
                            Name = "Irina",
                            Surname = "Fedorova"
                        },
                        new
                        {
                            Id = 14,
                            Age = 22,
                            Name = "Mila",
                            Surname = "Vinogradova"
                        },
                        new
                        {
                            Id = 15,
                            Age = 30,
                            Name = "Ekaterina",
                            Surname = "Ignatieva"
                        },
                        new
                        {
                            Id = 16,
                            Age = 20,
                            Name = "Veronika",
                            Surname = "Petrova"
                        },
                        new
                        {
                            Id = 17,
                            Age = 22,
                            Name = "Maxim",
                            Surname = "Tkachev"
                        },
                        new
                        {
                            Id = 18,
                            Age = 25,
                            Name = "Alisa",
                            Surname = "Marselyevna"
                        },
                        new
                        {
                            Id = 19,
                            Age = 28,
                            Name = "Vasilisa",
                            Surname = "Knyazeva"
                        },
                        new
                        {
                            Id = 20,
                            Age = 18,
                            Name = "Andrey",
                            Surname = "Vereshchagin"
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.StudentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadyToStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "",
                            CourseId = 1,
                            ReadyToStartDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comments = "",
                            CourseId = 2,
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comments = "",
                            CourseId = 2,
                            ReadyToStartDate = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comments = "",
                            CourseId = 2,
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comments = "",
                            CourseId = 3,
                            ReadyToStartDate = new DateTime(2021, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 6,
                            Comments = "",
                            CourseId = 3,
                            ReadyToStartDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 6
                        },
                        new
                        {
                            Id = 7,
                            Comments = "",
                            CourseId = 4,
                            ReadyToStartDate = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 8,
                            Comments = "",
                            CourseId = 4,
                            ReadyToStartDate = new DateTime(2021, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 9,
                            Comments = "",
                            CourseId = 5,
                            ReadyToStartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 8
                        },
                        new
                        {
                            Id = 10,
                            Comments = "",
                            CourseId = 5,
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 9
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.StudentToGroupAssignment", b =>
                {
                    b.Property<int>("StudentToGroupAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentToGroupAssignmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupAssignments");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 25,
                            Bio = "Sphere of interests: web and mobile application testing,IoT, AR, API testing; creation and establishment of a teststrategy and a policy of the QA department; review of testingprocesses within projects; team management (interviews, hiring,tech. reviews, employee development).",
                            Name = "Elena",
                            Surname = "Rukavichnikova",
                            UserId = "8cccb2bc-95ed-4b5c-b72a-a2ee25bb6f94"
                        },
                        new
                        {
                            Id = 2,
                            Age = 26,
                            Bio = "Area of ​​interest: Front-end development, modern frameworks (Angular, Vue),cloud technologies (Google Firebase, Amazon Web Services).",
                            Name = "Dmitry",
                            Surname = "Astreiko",
                            UserId = "8594cfc3-4252-4502-80e9-5c9dc3341595"
                        },
                        new
                        {
                            Id = 3,
                            Age = 28,
                            Bio = "Designer, designer. Work experience: over 10 years. Teaching experience: over 7 years.",
                            Name = "Julia",
                            Surname = "Morgun",
                            UserId = "da19a821-caca-4aa8-b544-45dc830b99d1"
                        },
                        new
                        {
                            Id = 4,
                            Age = 44,
                            Bio = "Java and Android Developer. Work experience: over 14 years. Teaching experience: over 8 years",
                            Name = "Igor",
                            Surname = "Pinyutin",
                            UserId = "4188500e-87e7-4375-937c-2a1670a84418"
                        },
                        new
                        {
                            Id = 5,
                            Age = 29,
                            Bio = "Java developer, Qulix Systems company. Work experience: more than 4 years. Teaching experience: over 1 year",
                            Name = "Dmitry",
                            Surname = "Samsonov",
                            UserId = "6eca67d1-8174-46d9-9916-ed620e57e00d"
                        },
                        new
                        {
                            Id = 6,
                            Age = 24,
                            Bio = "WEB developer, .NET developer",
                            Name = "Gleb",
                            Surname = "Belkevich",
                            UserId = "c05565d8-eaa8-4411-9b72-4ad0decdd06d"
                        },
                        new
                        {
                            Id = 7,
                            Age = 25,
                            Bio = "Areas of interest: development of mobile games, studying new technologies in the gaming industry (from virtual reality to multiplayer gaming technologies), AAA games.",
                            Name = "Artem ",
                            Surname = "Mazgo ",
                            UserId = "6743e8d1-bb94-48ca-83ce-cd14ba74d17b"
                        },
                        new
                        {
                            Id = 8,
                            Age = 32,
                            Bio = "Basics of web technologies, Website development using HTML, CSS and JavaScript Field of interest: HTML, CSS, JavaScript, nodeJS, reactJS and in general everything related to web development.",
                            Name = "Evgeny",
                            Surname = "Voitekhovich",
                            UserId = "79301f3b-d0ed-4331-9af8-7c751bce2f9b"
                        },
                        new
                        {
                            Id = 9,
                            Age = 26,
                            Bio = "Course: Java Programming Field of Interest: Java, Spring, Python, Machine Learning, Data Science, Flutter, Angular.",
                            Name = "Maria",
                            Surname = "Sokol",
                            UserId = "13309c41-4a79-402e-a5e4-63645c9ce8dd"
                        },
                        new
                        {
                            Id = 10,
                            Age = 26,
                            Bio = "Area of ​​interest: C ++, Graphics, Game engines.",
                            Name = "Andrey",
                            Surname = "Martsinkevich",
                            UserId = "9eb23459-2eaa-40a0-ad80-2f3288665d19"
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Microsoft's ASP.NET platform is used to create simple web sites, and large-scale projects - highly reliable network portals, which are designed for an audience of thousands. Due to security and flexibility, it is actively used by large companies: popular Microsoft sites, Lego, Volvo, Toyota, L'Oreal are developed with ASP.NET.",
                            Title = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The Java programming language is among the leaders in many ratings: TIOBE - based on calculating the results of search queries, PYPL - according to the analysis of popularity in the Google search engine, IEEE - according to a set of indicators, such as mention in projects, articles, vacancies and others. Such popularity due to its almost limitless possibilities and areas of application. Java does not depend on a certain platforms, it is called a secure, portable, high performance and dynamic language.",
                            Title = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Description = "As the choice of devices and browsers expands, the need for flexible, responsive user interfaces increases (after all, no one wants to use a site that is only half displayed). This is exactly what the Front-end developer is working on: from adaptation and layout of design layouts to the implementation of complex logic of interaction with users during website development.",
                            Title = "Front-end development"
                        },
                        new
                        {
                            Id = 4,
                            Description = "С++ widely used for software development, being one of the most popular programming languages. Its scope includes the creation of operating systems, a variety of application programs, device drivers, applications for embedded systems, high-performance servers, and games. There are many implementations of the C ++ language, both free and commercial and for various platforms. C ++ has had a huge impact on other  programming languages, most notably Java and C #.",
                            Title = "С++"
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9888c09b-2509-4cda-a82e-3dbea07d94eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3eaf447-f4a9-497f-804d-0b35897ee218",
                            Email = "manager@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "manager@gmail.com",
                            NormalizedUserName = "manager@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8hZ7bKBKgzSBOIMnS+2mCVMS4Rw266loTm/VIXlZ5G4kQ/VcRwz1JZHi5WkRqShw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1065a9ff-293c-4c13-ae33-d165cb531381",
                            TwoFactorEnabled = false,
                            UserName = "manager@gmail.com"
                        },
                        new
                        {
                            Id = "8cccb2bc-95ed-4b5c-b72a-a2ee25bb6f94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02ba43f4-fad3-4720-bb5f-0286b95e99fb",
                            Email = "rukavichnikova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rukavichnikova@gmail.com",
                            NormalizedUserName = "rukavichnikova@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPKpsnKo04Vqv5wdxNFfmv8DDnvdf/piwEAcGYktWG/jz+YSENvt6WIt3KuFpkrcXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5efcf3bd-7163-4a6f-9814-52075ecad721",
                            TwoFactorEnabled = false,
                            UserName = "rukavichnikova@gmail.com"
                        },
                        new
                        {
                            Id = "8594cfc3-4252-4502-80e9-5c9dc3341595",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8fda093-3bba-484f-b57c-7e7fc473cb9c",
                            Email = "astreiko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "astreiko@gmail.com",
                            NormalizedUserName = "astreiko@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPVPJHsFUeouL9U+uq++2SwP68MEDy1nDTYtxC5L132dsckuIgHB2Et7ii4N8AXwMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e13df29-32a6-4bfa-836e-61756a477fd0",
                            TwoFactorEnabled = false,
                            UserName = "astreiko@gmail.com"
                        },
                        new
                        {
                            Id = "da19a821-caca-4aa8-b544-45dc830b99d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca85bb0f-a268-43e0-b6ef-1e7b57cd1783",
                            Email = "morgun@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "morgun@gmail.com",
                            NormalizedUserName = "morgun@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBxkHL8bRvMk0HUor/ooqRY7cqW5ZcH6bUMaXeYloTwRYWwEGlnBFK7ljiaqTo/wqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b180904-5ea7-4ee3-ba44-2839504b080f",
                            TwoFactorEnabled = false,
                            UserName = "morgun@gmail.com"
                        },
                        new
                        {
                            Id = "4188500e-87e7-4375-937c-2a1670a84418",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac066713-e9fb-4bbb-ba5f-1ae637ab3001",
                            Email = "pinyutin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "pinyutin@gmail.com",
                            NormalizedUserName = "pinyutin@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEM0ON9IuODVmmK61C92/kEJzaF446Mxqwal4SK4c2GyjsGQeZLgYJyApZPcuFc4Rxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33327dc7-1d93-4a6e-af2f-f958d08272c2",
                            TwoFactorEnabled = false,
                            UserName = "pinyutin@gmail.com"
                        },
                        new
                        {
                            Id = "6eca67d1-8174-46d9-9916-ed620e57e00d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be1cb36b-5f42-4be0-aa27-97390d6c8be4",
                            Email = "samsonov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "samsonov@gmail.com",
                            NormalizedUserName = "samsonov@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUJIVKnLnIIo9v+CkZf9QKh1+0da88UbBGfV0VECEXMN6kIRMNqywb/qIRsxh3gFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d7a286b-d93e-4c33-804d-5b19f91309af",
                            TwoFactorEnabled = false,
                            UserName = "samsonov@gmail.com"
                        },
                        new
                        {
                            Id = "c05565d8-eaa8-4411-9b72-4ad0decdd06d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1e58ae9-b029-41f1-bfc2-768233769cdd",
                            Email = "belkevich@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "belkevich@gmail.com",
                            NormalizedUserName = "belkevich@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECsOGLvjl7dGrBh9eCOgpkfxAQGfCAeXIgreBOJBb7+anoQIqBPggnXzupxvnKF0Kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d77d1ca2-286f-45da-aded-477947c44aae",
                            TwoFactorEnabled = false,
                            UserName = "belkevich@gmail.com"
                        },
                        new
                        {
                            Id = "6743e8d1-bb94-48ca-83ce-cd14ba74d17b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c64666d-53f8-47b7-b315-3605b4247678",
                            Email = "mazgo@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "mazgo@gmail.com",
                            NormalizedUserName = "mazgo@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFkj2LMgSz0psswpX21uHjTfS4xYxAkoz3UQYfO3qhFh7lSbvMkkyMet7dfrb0YVYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d8b44f9-7892-4622-b91e-1cc7956da064",
                            TwoFactorEnabled = false,
                            UserName = "mazgo@gmail.com"
                        },
                        new
                        {
                            Id = "79301f3b-d0ed-4331-9af8-7c751bce2f9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d290025e-c958-4095-82ba-5e71d996455b",
                            Email = "voitekhovich.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "voitekhovich@gmail.com",
                            NormalizedUserName = "voitekhovich@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPEcqFMxoavT5gnuF87e6fKEPBEd4QTqm+PI47Zy1JQeyYw8CTir+1UGYUyOxGySYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ed3efe4-c912-497f-a88c-d92663e0ab3e",
                            TwoFactorEnabled = false,
                            UserName = "voitekhovich@gmail.com"
                        },
                        new
                        {
                            Id = "13309c41-4a79-402e-a5e4-63645c9ce8dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ed105d4-f054-49a9-a2b9-5209a1f183be",
                            Email = "sokol@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "sokol@gmail.com",
                            NormalizedUserName = "sokol@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcFdpU4CixFgjBEEvOlLLwz65iRFM0ohwyMSLuEpNLz2K/zf2qJUItCkkDXZMYIJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d4d2f94-25e3-4e9e-9163-8be9fc62c659",
                            TwoFactorEnabled = false,
                            UserName = "sokol@gmail.com"
                        },
                        new
                        {
                            Id = "9eb23459-2eaa-40a0-ad80-2f3288665d19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee9ab617-b524-4adb-8586-0f4fe8407140",
                            Email = "martsinkevich@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "martsinkevich@gmail.com",
                            NormalizedUserName = "martsinkevich@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECLQy5NghawKVtBO/DZhARqTAH7MZqL3LJFokmZh18K0E0uDuF58NPZT4HD88mTN1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd0f9100-0acd-4bae-a152-84c440e37219",
                            TwoFactorEnabled = false,
                            UserName = "martsinkevich@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Course", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.File", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.FileToMaterialAssignment", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.Core.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.Core.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Material");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Group", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.Core.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Manager", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("TrainingCenterCRM.Core.Models.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Material", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Student", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.HasOne("TrainingCenterCRM.Core.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("TrainingCenterCRM.Core.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.StudentRequest", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.StudentToGroupAssignment", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Teacher", b =>
                {
                    b.HasOne("TrainingCenterCRM.Core.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("TrainingCenterCRM.Core.Models.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TrainingCenterCRM.Core.Models.User", b =>
                {
                    b.Navigation("Manager");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
