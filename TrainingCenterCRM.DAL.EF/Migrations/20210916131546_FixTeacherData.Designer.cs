// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingCenterCRM.DAL.EF.Context;

namespace TrainingCenterCRM.DAL.EF.Migrations
{
    [DbContext(typeof(TrainingCenterContext))]
    [Migration("20210916131546_FixTeacherData")]
    partial class FixTeacherData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FileMaterial", b =>
                {
                    b.Property<int>("FilesId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialsId")
                        .HasColumnType("int");

                    b.HasKey("FilesId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("FileMaterial");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "021cb353-a049-404c-b2f6-b067a48a3b9a",
                            ConcurrencyStamp = "ae7934fd-7ae5-4a04-84c0-37dd6c66db62",
                            Name = "user"
                        },
                        new
                        {
                            Id = "800ac90f-e24c-485a-8be4-5869972e12a7",
                            ConcurrencyStamp = "9bd903a7-b8d3-4aa8-947e-a3ce8bffa451",
                            Name = "admin"
                        },
                        new
                        {
                            Id = "dc580e4d-92ba-47a9-bb31-62b0afb85445",
                            ConcurrencyStamp = "00886498-12b1-4d26-9267-8469fc5516db",
                            Name = "teacher"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8cccb2bc-95ed-4b5c-b72a-a2ee25bb6f94",
                            RoleId = "dc580e4d-92ba-47a9-bb31-62b0afb85445"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic course",
                            Title = "C# Programming",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Professional course",
                            Title = "Industrial programming with ASP.NET",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Professional course",
                            Title = "Development of mobile games on the Unity engine",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Basic course",
                            Title = "Java programming",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Professional course",
                            Title = "Development of mobile applications for Android",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Professional course",
                            Title = "Java Web Development",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Basic course",
                            Title = "HTML, CSS and JavaScript",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "Professional course",
                            Title = "JavaScript Web Application Development",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 9,
                            Description = "Professional course",
                            Title = "React and Angular for web development",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Basic course",
                            Title = "C and C++ Programming",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 11,
                            Description = "Professional course",
                            Title = "Professional game development in C++",
                            TopicId = 4
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            Name = "Darya",
                            Surname = "Fedorova"
                        },
                        new
                        {
                            Id = 2,
                            Age = 22,
                            Name = "Andrey",
                            Surname = "Popov"
                        },
                        new
                        {
                            Id = 3,
                            Age = 24,
                            Name = "Dima",
                            Surname = "Karasev"
                        },
                        new
                        {
                            Id = 4,
                            Age = 28,
                            Name = "Denis",
                            Surname = "Polonikov"
                        },
                        new
                        {
                            Id = 5,
                            Age = 20,
                            Name = "Anna",
                            Surname = "Bykova"
                        },
                        new
                        {
                            Id = 6,
                            Age = 28,
                            Name = "Vladimir",
                            Surname = "Chernyaev"
                        },
                        new
                        {
                            Id = 7,
                            Age = 30,
                            Name = "Ivan",
                            Surname = "Kochergin"
                        },
                        new
                        {
                            Id = 8,
                            Age = 19,
                            Name = "Eva",
                            Surname = "Demina"
                        },
                        new
                        {
                            Id = 9,
                            Age = 19,
                            Name = "Alexey",
                            Surname = "Bazhenov"
                        },
                        new
                        {
                            Id = 10,
                            Age = 21,
                            Name = "Bogdan",
                            Surname = "Kuznetsov"
                        },
                        new
                        {
                            Id = 11,
                            Age = 26,
                            Name = "Nikolay",
                            Surname = "Savin"
                        },
                        new
                        {
                            Id = 12,
                            Age = 23,
                            Name = "Elizaveta",
                            Surname = "Petrova"
                        },
                        new
                        {
                            Id = 13,
                            Age = 22,
                            Name = "Irina",
                            Surname = "Fedorova"
                        },
                        new
                        {
                            Id = 14,
                            Age = 22,
                            Name = "Mila",
                            Surname = "Vinogradova"
                        },
                        new
                        {
                            Id = 15,
                            Age = 30,
                            Name = "Ekaterina",
                            Surname = "Ignatieva"
                        },
                        new
                        {
                            Id = 16,
                            Age = 20,
                            Name = "Veronika",
                            Surname = "Petrova"
                        },
                        new
                        {
                            Id = 17,
                            Age = 22,
                            Name = "Maxim",
                            Surname = "Tkachev"
                        },
                        new
                        {
                            Id = 18,
                            Age = 25,
                            Name = "Alisa",
                            Surname = "Marselyevna"
                        },
                        new
                        {
                            Id = 19,
                            Age = 28,
                            Name = "Vasilisa",
                            Surname = "Knyazeva"
                        },
                        new
                        {
                            Id = 20,
                            Age = 18,
                            Name = "Andrey",
                            Surname = "Vereshchagin"
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.StudentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadyToStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "",
                            CourseId = 1,
                            ReadyToStartDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comments = "",
                            CourseId = 2,
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comments = "",
                            CourseId = 2,
                            ReadyToStartDate = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comments = "",
                            CourseId = 2,
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comments = "",
                            CourseId = 3,
                            ReadyToStartDate = new DateTime(2021, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 6,
                            Comments = "",
                            CourseId = 3,
                            ReadyToStartDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 6
                        },
                        new
                        {
                            Id = 7,
                            Comments = "",
                            CourseId = 4,
                            ReadyToStartDate = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 8,
                            Comments = "",
                            CourseId = 4,
                            ReadyToStartDate = new DateTime(2021, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 9,
                            Comments = "",
                            CourseId = 5,
                            ReadyToStartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 8
                        },
                        new
                        {
                            Id = 10,
                            Comments = "",
                            CourseId = 5,
                            ReadyToStartDate = new DateTime(2021, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            StudentId = 9
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.StudentToGroupAssignment", b =>
                {
                    b.Property<int>("StudentToGroupAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentToGroupAssignmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupAssignments");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 25,
                            Bio = "Sphere of interests: web and mobile application testing,IoT, AR, API testing; creation and establishment of a teststrategy and a policy of the QA department; review of testingprocesses within projects; team management (interviews, hiring,tech. reviews, employee development).",
                            Name = "Elena",
                            Surname = "Rukavichnikova",
                            UserId = "8cccb2bc-95ed-4b5c-b72a-a2ee25bb6f94"
                        },
                        new
                        {
                            Id = 2,
                            Age = 26,
                            Bio = "Area of ​​interest: Front-end development, modern frameworks (Angular, Vue),cloud technologies (Google Firebase, Amazon Web Services).",
                            Name = "Dmitry",
                            Surname = "Astreiko"
                        },
                        new
                        {
                            Id = 3,
                            Age = 28,
                            Bio = "Designer, designer. Work experience: over 10 years. Teaching experience: over 7 years.",
                            Name = "Julia",
                            Surname = "Morgun"
                        },
                        new
                        {
                            Id = 4,
                            Age = 44,
                            Bio = "Java and Android Developer. Work experience: over 14 years. Teaching experience: over 8 years",
                            Name = "Igor",
                            Surname = "Pinyutin"
                        },
                        new
                        {
                            Id = 5,
                            Age = 29,
                            Bio = "Java developer, Qulix Systems company. Work experience: more than 4 years. Teaching experience: over 1 year",
                            Name = "Dmitry",
                            Surname = "Samsonov"
                        },
                        new
                        {
                            Id = 6,
                            Age = 24,
                            Bio = "WEB developer, .NET developer",
                            Name = "Gleb",
                            Surname = "Belkevich"
                        },
                        new
                        {
                            Id = 7,
                            Age = 25,
                            Bio = "Areas of interest: development of mobile games, studying new technologies in the gaming industry (from virtual reality to multiplayer gaming technologies), AAA games.",
                            Name = "Artem ",
                            Surname = "Mazgo "
                        },
                        new
                        {
                            Id = 8,
                            Age = 32,
                            Bio = "Basics of web technologies, Website development using HTML, CSS and JavaScript Field of interest: HTML, CSS, JavaScript, nodeJS, reactJS and in general everything related to web development.",
                            Name = "Evgeny",
                            Surname = "Voitekhovich"
                        },
                        new
                        {
                            Id = 9,
                            Age = 26,
                            Bio = "Course: Java Programming Field of Interest: Java, Spring, Python, Machine Learning, Data Science, Flutter, Angular.",
                            Name = "Maria",
                            Surname = "Sokol"
                        },
                        new
                        {
                            Id = 10,
                            Age = 26,
                            Bio = "Area of ​​interest: C ++, Graphics, Game engines.",
                            Name = "Andrey",
                            Surname = "Martsinkevich"
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Microsoft's ASP.NET platform is used to create simple web sites, and large-scale projects - highly reliable network portals, which are designed for an audience of thousands. Due to security and flexibility, it is actively used by large companies: popular Microsoft sites, Lego, Volvo, Toyota, L'Oreal are developed with ASP.NET.",
                            Title = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The Java programming language is among the leaders in many ratings: TIOBE - based on calculating the results of search queries, PYPL - according to the analysis of popularity in the Google search engine, IEEE - according to a set of indicators, such as mention in projects, articles, vacancies and others. Such popularity due to its almost limitless possibilities and areas of application. Java does not depend on a certain platforms, it is called a secure, portable, high performance and dynamic language.",
                            Title = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Description = "As the choice of devices and browsers expands, the need for flexible, responsive user interfaces increases (after all, no one wants to use a site that is only half displayed). This is exactly what the Front-end developer is working on: from adaptation and layout of design layouts to the implementation of complex logic of interaction with users during website development.",
                            Title = "Front-end development"
                        },
                        new
                        {
                            Id = 4,
                            Description = "С++ widely used for software development, being one of the most popular programming languages. Its scope includes the creation of operating systems, a variety of application programs, device drivers, applications for embedded systems, high-performance servers, and games. There are many implementations of the C ++ language, both free and commercial and for various platforms. C ++ has had a huge impact on other  programming languages, most notably Java and C #.",
                            Title = "С++"
                        });
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8cccb2bc-95ed-4b5c-b72a-a2ee25bb6f94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df7a980a-af26-4507-9431-e19fdc32cb14",
                            Email = "rukavichnikova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rukavichnikova@gmail.com",
                            NormalizedUserName = "rukavichnikova@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBCSfce/DM5QBhYPDxrtefzHB+9yFbeWNY2r54HcEg0MDZJ01csld1EK/Fhba9NNmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e009511-4a00-41aa-be37-e6cc508aa974",
                            TwoFactorEnabled = false,
                            UserName = "rukavichnikova@gmail.com"
                        });
                });

            modelBuilder.Entity("FileMaterial", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.File", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.BLL.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.BLL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Course", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.File", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Group", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.BLL.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Material", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Student", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.HasOne("TrainingCenterCRM.BLL.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("TrainingCenterCRM.BLL.Models.Student", "UserId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.StudentRequest", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.BLL.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.StudentToGroupAssignment", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenterCRM.BLL.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Teacher", b =>
                {
                    b.HasOne("TrainingCenterCRM.BLL.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("TrainingCenterCRM.BLL.Models.Teacher", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TrainingCenterCRM.BLL.Models.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
